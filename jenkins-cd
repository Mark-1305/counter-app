pipeline {
    agent any 

    parameters{
        choice(name: 'action', choices: 'create\ndelete', description: 'Create and Delete the pods')
    }

/*
This Parameters are for EKS Connect with Jenkins & Deployment on EKS cluster
    parameters{
        choice(name: 'action', choices: 'create\ndestroy\ndestroyekscluster', description: 'Create/Update or Destroy the EKS cluster')
        string (name: 'cluster', defaultValue: 'demo-cluster', description: 'EKS Cluster Name')
        string (name: 'region', defaultValue: 'us-east-1', description: 'EKS Cluster Region')
    }
    enviroment{
        ACCESS_KEY = credentials('aws_access_key_id')
        SECRET_KEY = credentials('aws_secret_key_id')
    }
*/
    stages{
        stage('git checkout'){

            steps{
                git branch: 'main', url: "https://github.com/Mark-1305/counter-app.git"
            }
        }
/*
        stage('EKS Connect'){

            steps{
                sh """

                    aws configure set aws_access_key_id "$ACCESS_KEY"
                    aws configure set aws_secret_key_id "$SECRET_KEY"
                    aws configure set region ""
                    aws eks --region ${params.region} update-kubeconfig --name ${params.cluster}
                """;
                
            }
        }

        stage('eks deployments'){
            when { expression {params.action == 'create'}}
            steps{

                script{
                    def apply = false
                    try{
                        input message: 'please confirm the apply to iniate the deployment', ok 'Ready to apply the config'
                        apply = true

                    }
                    catch (err){
                        apply = false
                        CurrentBuild.result = 'UNSTABLE'
                    }
                    if (apply){
                        sh """
                        kubectl apply -f .
                        """;
                    }

                }
            }
        }

        stage('Delete Deployments'){
            when {expression {params.action == 'destroy'}}
            steps{
                script{
                    def destroy = false
                    try{
                        input message: 'please confirm to delete the deployment', ok 'Ready to delete the config'
                        destroy = true
                    }
                    catch (err){
                        destroy = false
                        CurrentBuild.result = 'UNSTABLE'
                    }
                    if (destroy){
                        sh """

                            kubectl delete -f .
                        """;
                    }
                }
            }
        }
*/
/*
This script has worked - it has to be used as Single Script not along with the above one

        stage('Kubernetes Deployment - Dev'){
            steps{
                withKubeConfig([credentialsId: 'kubeconfig']) {
                sh "kubectl apply -f Deployment.yaml "
        } 
      }   
    }
*/
 
        stage('Kubernetes Login'){
            steps{
                withKubeConfig([credentialsId: 'kubeconfig']){
                sh echo "Login Success"
                }
                }
        }
/* 
        stage('Kubernetes Deployments - In Local Cluster'){
            when { expression {params.action == 'create'}}
            steps{
                withKubeConfig([credentialsId: 'kubeconfig'])
                script{
                    def apply = false
                    try{
                        input message: 'please confirm the apply to iniate the deployment', ok 'Ready to apply the config'
                        apply = true

                    }
                    catch (err){
                        apply = false
                        CurrentBuild.result = 'UNSTABLE'
                    }
                    if (apply){
                        sh """
                        kubectl apply -f Deployment.yaml 
                        """;
                    }  
                } 
            }
        }
      */     
  }
}

